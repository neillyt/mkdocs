RUBY NOTES

Mathematical operators:
8 * 8
5 + 5
5 - 5

Convert data types:

to_s                                       = Convert to string
to_i                                       = Convert to integer
to_a                                       = Convert to array

Common Methods:

.reverse                                   = Reverse a string
.length                                    = Get the length of a string
.max                                       = Get the highest number in an array
.sort                                      = Sort an array
.sort!                                     = Sort an array and keep the contents sorted
.lines                                     = Splits a large string into lines
.join                                      = Combines multiple strings into a single string
.downcase                                  = Makes all letters in a string lowercase
.include?                                  = True or False check to see if a substring is in a string
.times                                     = Do something x amount of times
Dir.entries				   = List everything in a directory

Arrays:
[]                                         = Create an empty array
ticket = [12, 34, 57]                      = Create an array called ticket
ticket                                     = Print the array

Printing:
print derp                                 = Print the contents of the variable derp
print "hi","tom","guy"			   = Print multiple strings

Square brackets:
poem["word"] = "new word"                  = Replaces "word" with "new word"

Dictionary (hash):
books = {}                                 = Defining a dictionary/hash
books["Gravity's Rainbow"] = :splendid     = Add an entry to the dictionary
books.keys                                 = Show all keys in the dictionary
books.values                               = Show all values in the dictionary
Ratings = Hash.new(0)                      = Build an empty hash
books.values.each { |rate| ratings[rate] += 1 }   = Turn all unique values in books into keys with the new Rating has.




Blocks of Ruby code are always attached to methods:

5.times { print "Odelay!" }


Dir can search for files with wildcards:
Dir.entries "/"                            = List everything in the root directory
Dir[]					   = Can search for files with wildcards
Dir["/*.txt"]				   = Find files that end with ".txt"


File - used for working with files - writing and reading files:

print File.read("/comics.txt")       		        = Print the contents of the /comics.txt file
FileUtils.cp('/comics.txt', '/Home/comics.txt')  	= Copy method to copy a file
File.open("/Home/comics.txt", "a") do |f|		= Open a file in 'append' mode, "end" to end
File.mtime("/Home/comics.txt")				= Get last modified time of file
File.mtime("/Home/comics.txt").hour			= Get last modified hour of file


Creating methods:

def load_­comics(path)
  comics = {}
  Files.foreach(path) do |line|
  name,url=line.split(': ')
  comics[name] = url.strip
  end
  comics
  end


Including other classes:

require 'popup'						 = Imports the "popup" library
Popup.goto "http://bing.com"				 = Launches a popup to bing.com


Popup.make {						 = Create your own popup
  h1 "My Links"
  link "Go to bing","http://bing.com"
}





Conditional statements:

unless:  if not

unless tweets.empty?   					 = unless is a better alternative to if not
  puts "Timeline"
  puts tweets

if tweets.empty?
  puts "No tweets found"
else
  puts "Timeline:"
  puts tweets
end

if attachment.file_path					 = Evals to true, posts attachment
  attachment.post
end

# Inline if / unless

fail "Password too short" if password.length < 8
fail "No user name set" unless username



if user && user.signed_in?
    print "signed in"
end


tweets = timeline.tweets || []				 = If timeline.tweets is nil, will set to array


def sign_in						 = If current session evals false, sign_user_in
  current_session || sign_user_in
end


i_was_set = 1						 = Set var to 1
i_was_set ||= 2					         = If i_was_set is not set, set to 2
puts i_was_set						 = Save this var


options[:country] = 'us' if options[:country].nil?	 = set to 'us' if nil
options[:country] ||= 'us'				 = set to 'us' if nil (better code)


Conditional return value:

if list_name
  options[:path] = "/#{user_name}/#{list_name}"
else
  options[:path] = "/#{user_name}"
end

BETTER WAY

options[:path] = if list_name
  "/#{user_name}/#{list_name}"
else
  "/#{user_name}"
end

